class Block {
    constructor() {
        if (new.target === Block) {
            throw new TypeError("Cannot construct Abstract instances directly");
        }
    }

    toHTML() {
        throw new Error("Method 'toHTML()' must be implemented.");
    }
}

class HeaderBlock extends Block {
    constructor(name, avatar) {
        super();
        this.name = name;
        this.avatar = avatar;
    }

    toHTML() {
        return `
            <img src="${this.avatar}" alt="${this.name}" class="avatar">
            <h1 contenteditable="false">${this.name}</h1>
        `;
    }
}

class InfoBlock extends Block {
    constructor(description) {
        super();
        this.description = description;
    }

    toHTML() {
        return `
            <p contenteditable="false">${this.description}</p>
        `;
    }
}

class LinkBlock extends Block {
    constructor(link) {
        super();
        this.link = link;
    }

    toHTML() {
        return `
            <a href="${this.link}" contenteditable="false">${this.link}</a>
        `;
    }
}

class Card {
    constructor(name, avatar, description, link) {
        this.headerBlock = new HeaderBlock(name, avatar);
        this.infoBlock = new InfoBlock(description);
        this.linkBlock = new LinkBlock(link);
    }

    toHTML() {
        return `
            ${this.headerBlock.toHTML()}
            ${this.infoBlock.toHTML()}
            ${this.linkBlock.toHTML()}
        `;
    }
}

class CardManager {
    constructor() {
        this.cardsData = [
            {
                name: "–£–±–ª—é–¥–æ–∫ ‚Ññ1 (–ö–ª–æ—É–Ω)",
                avatar: "images/–ö–ª–æ—É–Ω.png",
                description: "–ì—Ä–æ–º–∫–æ —Ö–æ–¥–∏—Ç –∏–∑-–∑–∞ —Å–≤–æ–∏—Ö –±–æ–ª—å—à–∏—Ö –Ω–æ–≥! –ë—å–µ—Ç –ª–∞–∑–µ—Ä–æ–º, –∫–æ—Ç–æ—Ä—ã–π —É–±–∏–≤–∞–µ—Ç —Å –æ–¥–Ω–æ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞. –¢–∞–∫–∂–µ –±–µ—Ä–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏ –ª–∞–∑–µ—Ä–æ–º.",
                link: "https://steamcommunity.com/sharedfiles/filedetails/?id=3438192859"
            },
            {
                name: "–£–±–ª—é–¥–æ–∫ ‚Ññ2 (–ú–æ–Ω–∞—à–∫–∞)",
                avatar: "images/–•–∞–ª–∞—Ç.png",
                description: "–ë–ï–ó–®–£–ú–ù–û –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ—Ç—Å—è! –¢–∞–∫–∂–µ, –∑–∞–º–µ—Ç–∏–≤ –∏–≥—Ä–æ–∫–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –∫ –Ω–µ–º—É —É–∂–µ —á—É—Ç—å –±—ã—Å—Ç—Ä–µ–µ. –ù–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç –µ–º—É –Ω–∞ –º–∞—Å–∫—É(–ª–∏—Ü–æ), —Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –∫—Ä–∏—á–∞—Ç—å –∏ —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ –∏–≥—Ä–æ–∫—É!",
                link: "https://steamcommunity.com/sharedfiles/filedetails/?id=3438192859"
            },
            {
                name: "–£–±–ª—é–¥–æ–∫ ‚Ññ3 (–£—Ç–∫–∞)",
                avatar: "images/–£—Ç–∫–∞.png",
                description: "–≠—Ç–∞ —É—Ç–∫–∞ —Å–ª–µ–¥—É–µ—Ç –∑–∞ —Å–∞–º—ã–º –±–æ–ª—å—à–∏–º –º–æ–Ω—Å—Ç—Ä–æ–º, –Ω–æ –∫–æ–≥–¥–∞ –∑–∞–º–µ—Ç–∏—Ç –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –∏–≥—Ä–æ–∫–æ–º –∏ –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ø–∞—Å—Ç—å –≤ –µ–≥–æ '–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∏–µ' —á—Ç–æ –±—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–µ –ø–æ—Ç—Ä–æ–≥–∞–ª–∏, –Ω–æ —Å—Ç–æ–∏—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–ø–ª–æ—Ç–∏—Ç—Å—è –≤ —É—Ç–∫—É —Å –æ–≥—Ä–æ–º–Ω–æ–π –ø–∞—Å—Ç—å—é –∏ –Ω–∞—á–Ω–µ—Ç –≤–∞—Å –∫—É—Å–∞—Ç—å. —á–∞—â–µ –≤—Å–µ–≥–æ —É–±–∏–≤–∞–µ—Ç, –Ω–æ —É –Ω–µ–µ –µ—Å—Ç—å –ö–î. –µ—Å–ª–∏ –≤—ã –±—ã—Å—Ç—Ä—ã –∏–ª–∏ –∏–º–µ–µ—Ç–µ –º–Ω–æ–≥–æ –•–ü –º–æ–∂–Ω–æ –≤—ã–∂–∏—Ç—å.",
                link: "https://steamcommunity.com/sharedfiles/filedetails/?id=3438192859"
            }
        ];
        this.isEditMode = false;
    }

    init() {
        this.createHeader();
        this.renderCards();
    }

    createHeader() {
        const header = document.createElement('header');
        header.innerHTML = `
            <h1 id="site-title" contenteditable="false">–¢–æ–ø –º–æ–±–æ–≤ –≤ R.E.P.O.</h1>
            <button id="toggle-edit-mode">–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</button>
        `;
        document.body.insertBefore(header, document.getElementById('app'));

        document.getElementById('toggle-edit-mode').addEventListener('click', () => this.toggleEditMode());
    }

    toggleEditMode() {
        this.isEditMode = !this.isEditMode;
        const button = document.getElementById('toggle-edit-mode');
        button.textContent = this.isEditMode ? "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è";

        const title = document.getElementById('site-title');
        title.setAttribute('contenteditable', this.isEditMode);

        this.renderCards();
    }

    renderCards() {
        const app = document.getElementById('app');
        app.innerHTML = '';

        this.cardsData.forEach((cardData, index) => {
            const card = new Card(cardData.name, cardData.avatar, cardData.description, cardData.link);
            const cardHTML = `
                <div class="card">
                    ${this.isEditMode ? `
                        <div class="edit-buttons">
                            <button onclick="cardManager.editCard(${index})">‚úèÔ∏è</button>
                            <button onclick="cardManager.deleteCard(${index})">üóëÔ∏è</button>
                        </div>
                        <div class="avatar-edit">
                            <input type="file" class="avatar-file" accept="image/*" onchange="cardManager.handleAvatarUpload(${index}, this)">
                        </div>
                    ` : ''}
                    ${card.toHTML()}
                </div>
            `;
            app.innerHTML += cardHTML;
        });

        if (this.isEditMode) {
            const addCardButton = document.createElement('div');
            addCardButton.className = 'card';
            addCardButton.innerHTML = `
                <button class="add-card-button" onclick="cardManager.addCard()">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</button>
            `;
            app.appendChild(addCardButton);
        }

        if (this.isEditMode) {
            document.querySelectorAll('.card h1, .card p, .card a').forEach(element => {
                element.setAttribute('contenteditable', 'true');
            });
        }
    }

    handleAvatarUpload(index, fileInput) {
        const file = fileInput.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (event) => {
                this.cardsData[index].avatar = event.target.result;
                this.renderCards();
            };
            reader.readAsDataURL(file);
        }
    }

    editCard(index) {
        const cardElement = document.querySelectorAll('.card')[index];
        this.cardsData[index].name = cardElement.querySelector('h1').textContent;
        this.cardsData[index].description = cardElement.querySelector('p').textContent;
        this.cardsData[index].link = cardElement.querySelector('a').textContent;
        alert("–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
    }

    deleteCard(index) {
        this.cardsData.splice(index, 1);
        this.renderCards();
    }

    addCard() {
        this.cardsData.push({
            name: "–ù–æ–≤—ã–π —É–±–ª—é–¥–æ–∫",
            avatar: "images/default.jpg",
            description: "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞.",
            link: "–°—Å—ã–ª–∫–∞"
        });
        this.renderCards();
    }
}

const cardManager = new CardManager();
window.onload = () => cardManager.init();